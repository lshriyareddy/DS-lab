#include<stdio.h>
#include<stdlib.h>
struct node    //creating a node
{
	struct node *prev;
	struct node *next;
	int data;
};
struct node *head;
void insertion_beginning();
void insertion_last();
void insertion_specified();
void deletion_beginning();
void deletion_last();
void deletion_specified();
void display();
void search();
void main()  //main function
{
	int choice=0;
	while(choice!=9)
	{
	  printf("Operations performed: \n");
	  printf("\n1.Insert at the beginning\n2.Insert at the end\n3.Insert at specific location\n4.Delete at the beginning\n5.Delete at the end\n6.Delete at specific location\n7.Display\n8.Search\n9.Exit\n");
	  printf("Enter your choice\n");
	  scanf("%d", &choice);
	  switch(choice)
	  {
	    case 1: insertion_beginning();
	    break;
	    case 2: insertion_last();
	    break;
	    case 3: insertion_specified();
	    break;
	    case 4: deletion_beginning();
	    break;
	    case 5: deletion_last();
	    break;
	    case 6: deletion_specified();
	    break;
	    case 7: display();
	    break;
	    case 8: search();
	    break;
	    case 9: exit(0);
	    break;
	    default: printf("Invalid choice\n");
	  }
	}    
}
void insertion_beginning()     //insertion in the beginning
{
	struct node *ptr;
	int item;
	ptr=(struct node *)malloc(sizeof(struct node));
	if(ptr==NULL)
	{
	  printf("Overflow\n");
	}
	else
	{
	  printf("Enter item value\n");
	  scanf("%d", &item);
	  if(head==NULL)
	  {
	    ptr->next=NULL;
	    ptr->prev=NULL;
	    ptr->data=item;
	    head=ptr;
	  }
	  else
	  {
	    ptr->data=item;
	    ptr->prev=NULL;
	    ptr->next=head;
	    head->prev=ptr;
	    head=ptr;
	  }
	printf("\nNode inserted\n");
	}
}
void insertion_last()            //insertion at the end
{
	struct node *ptr, *temp;
	int item;
	ptr=(struct node*)malloc(sizeof(struct node));
	if(ptr==NULL)
	{
	  printf("Overflow\n");
	}
	else
	{
	  printf("Enter item value\n");
	  scanf("%d",&item);
	  ptr->data=item;
	  if(head==NULL)
	  {
	    ptr->next=NULL;
	    ptr->prev=NULL;
	    head=ptr;
	  }
	  else
	  {
	    temp=head;
	    while(temp->next!=NULL)
	    {
	      temp=temp->next;
	    }
	    temp->next=ptr;
	    ptr->prev=temp;
	    ptr->next=NULL;
	  }
	}
	printf("Node inserted\n");
}
void insertion_specified()       //insertion random
{
	struct node *ptr, *temp;
	int item,loc,i;	
	ptr=(struct node*)malloc(sizeof(struct node));
	if(ptr==NULL)
	{
	  printf("Overflow\n");
	}
	else
	{
	  temp=head;
	  printf("Enter location\n");
	  scanf("%d",&loc);
	  for(i=0;i<loc;i++)
	  {
	    temp=temp->next;
	    if(temp==NULL)
	    {
	      printf("There are less than %d elements", loc);
	      return;
	    }
	  }
	  printf("Enter value \n");
	  scanf("%d", &item);
	  ptr->data=item;
	  ptr->next=temp->next;
	  ptr->prev=temp;
	  temp->next=ptr;
	  temp->next->prev=ptr;
	  printf("Node inserted\n");
	}
}
void deletion_beginning()          //delete at beginning 
{
	struct node *ptr;
	if(head==NULL)
	{
	  printf("Underflow\n");
	}
	else if(head->next==NULL)
	{
	  head=NULL;
	  free(head);
	  printf("Node deleted\n");
	}
	else
	{
	  ptr=head;
	  head=head->next;
	  head->prev=NULL;
	  free(ptr);
	  printf("Node deleted\n");
	}
}
void deletion_last()             //delete at last
{
	struct node *ptr;
	if(head==NULL)
	{
	  printf("Underflow\n");
	}
	else if(head->next==NULL)
	{
	  head=NULL;
	  free(head);
	  printf("Node deleted\n");
	}
	else
	{
	  ptr=head;
	  if(ptr->next!=NULL)
	  {
	    ptr=ptr->next;
	  }
	  ptr->prev->next=NULL;
	  free(ptr);
	  printf("Node deleted\n");
	}
}
void deletion_specified()
{
	struct node *ptr, *temp;
	int val;
	printf("Enter the data after which node is to be deleted\n");
	scanf("%d", &val);
	ptr=head;
	while(ptr->data!=val)
	  ptr=ptr->next;
	if (ptr->next==NULL)
	{
	  printf("Can't delete\n");
	}
	else if(ptr->next->next==NULL)
	{
	  ptr->next=NULL;
	}
	else
	{
	  temp=ptr->next;
	  ptr->next=temp->next;
	  temp->next->prev=ptr;
	  free(temp);
	  printf("Node deleted\n");
	}
}
void display()
{
	struct node *ptr;
	printf("Printing values \n");
	ptr=head;
	while(ptr!=NULL)
	{
	  printf("%d\n", ptr->data);
	  ptr=ptr->next;
	}
}
void search()
{
	struct node *ptr;
	int item,i=0,flag;
	ptr=head;
	if(ptr==NULL)
	{
	  printf("Empty list\n");
	}
	else
	{
	  printf("Enter item to search: ");
	  scanf("%d", &item);
	  while(ptr!=NULL)
	  {  
	    if(ptr->data==item)
	    {
	      printf("\nItem found at location %d\n", i+1);
	      flag=0;
	      break;
	    }
	    else
	    {
	      flag=1;
	    }
	    i++;
	    ptr=ptr->next;
	  }
	  if(flag==1)
	  { 
	    printf("\nItem not found\n");
	  }
        }
}  

