//implementation of circular queue using linked list
#include<stdio.h>
#include<stdlib.h>                    //header files

struct node                           //creating node
{
  int data;
  struct node *next;
};
 struct node *front=-1;                
 struct node *rear=-1;
 
void enqueue(int x)          //function to insert values into the queue
{
 	struct node *newnode;
 	newnode=(struct node *)malloc(sizeof(struct node));      
 	newnode->data=x;
 	newnode->next=0;
 	if(rear==-1)
 	{
 	front=rear=newnode;
 	rear->next=front;
 	}
 	else
 	{
 	rear->next=newnode;
 	rear=newnode;
 	rear->next=front;
 	}
}
void dequeue()        //function to delete value from queue
{
  struct node *temp;
  temp=front;
  if((front==-1)&&(rear==-1))   //checking if circular queue is empty
  {
    printf("Queue is empty");
  }
  else if(front==rear)
  {
    front=rear=-1;
    free(temp);
  }
  else
  {
    front=front->next;
    rear->next=front;
    free(temp);
  }
}
void display()        //function to display the elements
{
struct node* t;
t=front;
if((front==NULL)&&(rear==NULL))
printf("\nQueue is empty");
else{
do{
printf("\n%d",t->data);
t=t->next;
}
while(t!=front);
}
}
int main()   //main function
{
 int choice,n,i,data;
 while(1)
 {
   printf("Operation performed by queue:\n");
    printf("1.insert\n2.Delete\n3.Display\n4.Exit\n");
    printf("Enter your choice: \n");
    scanf("%d", &choice);
    switch(choice)
    {
		case 1: printf("\nEnter the number of data:");
			    scanf("%d",&n);
			    printf("\nEnter your data");
			    i=0;
			    while(i<n){
			    scanf("%d",&data);
			    enqueue(data);
			    i++;
			    }
			    break;
		case 2: dequeue();
			    break;
		case 3: display();
				break;
		case 4: exit(0);
		default: printf("Invalid choice");
			     break;
	}
 }
 return 0;
}
